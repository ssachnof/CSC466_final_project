#CSC466 final project
#Samuel Erling Sachnoff (ssachnof@calpoly.edu)
#Ryan Holt (ryholt@calpoly.edu)
#Conor Whatley (cwhatley@calpoly.edu)
#Grayson Clendenon (gclenden@calpoly.edu)

please compile with python3.6 or higher
Samuel Sachnoff(ssachnof@calpoly.edu)
The data cleaning folder contains the scripts we used in order to clean the Carnegie play by play dataset we used.
Please feel free to use any of the datasets that we have created.

Questions:
QUESTION 1 & 2:
Given a team’s first half offensive stats, can we predict who wins the game?
Given a team’s whole game stats, can we predict who wins the game?
Additionally, both of the datasets that were created/ cleaned for this question are inside of the data folder.
In order to run either of the above 2 questions, please run predictor_win_game.py inside of the models folder. This file will run the cross validation
for either of the random forest or decision tree classifiers that we created. Additionally, this file takes a couple of different
command line arguments.

if you would like to run the cross validation for a given model:
    python3.6 predictor_win_game.py <filepath> <method> <hyperparameter_value> <selected columns>
    filepath: string representing the path to the input datafile(must either be all_games.csv or all_games_half1.csv)
    method: -rf for random forest or -dt for decision tree
    hyperparameter value:
        if using random forest classifier:
            integer representing the number of trees to create in the ensemble classifier
        if using decision tree:
            float represent the information gain threshold
    selected columns:
        a list of space delmited string representing the columns to use while building the model(ie. a b c d where a,b,c,d are different
        columns)
if you would like to run the model selection for either random forest or decision tree(I strongly suggest that you don't due to
the significant runtime)
    python3.6 predictor_win_game.py <filepath> <method> <max_cols>
    filepath- path to data file
    method: -rf or -dt for random forest or decision tree respectively
    max_cols: integer representing the maximum number of columns to use while performing model selection


QUESTION 4:
To run, cd into the question4 subdirectory and execute the following command:
style_clustering.py:
        usage: python3 style_clustering.py out_file k

        Reads the "data/team_stats_2018.csv" file. Uses K-Means to cluster the teams by their offensive, defensive, and special teams performances. Cluster, plot, and report results/analysis.
	
	Raw outputs are in the output folder, inputs are in the data directory.
	
Question 5:
 Classifier to predict what position a player plays based on their stats
 
 To run, make sure both FinalSimilarityGenerator.py, FinalKnn.py, and Career_Stats_Defensive.csv are in the same directory.
 Run FinalSimilarityGenerator.py first, which will take a while. Then run FinalKnn.py, entering the k value when prompted.
 Both programs can be run by themselves.
